searchState.loadedDescShard("cutler", 0, "Apply defaults from the config file.\nGenerate completions for bash\nCheck for version updates\nDeclarative macOS settings management at your fingertips, …\nGenerate shell completions\nManage the configuration file.\nDelete the configuration file.\nInitialize a new configuration file with sensible defaults.\nHard reset domains in the config file (dangerous, ignores …\nDisplay the contents of the configuration file.\nDisplay current status comparing the config vs current …\nUnapply (delete) defaults from the config file.\nGenerate completions for zsh\nRun in dry-run mode. Commands will be printed but not …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDo not restart system services after command execution.\nIncrease output verbosity.\nDirectory where to write the completion script\nSkip confirmation prompt\nShell type to generate completions for (bash or zsh)\nApplies settings from the configuration file\nChecks for updates to cutler by fetching the latest …\nDeletes the configuration file and offers to unapply …\nDisplays the contents of the configuration file to the …\nInitializes a new cutler configuration file with sensible …\nHard resets all domains from the config file without using …\nKills (restarts) Finder, Dock, and SystemUIServer to …\nDisplays the current status comparing the config vs …\nUnapplies settings using the stored snapshot\nGenerates completion script for the specified shell\nReturns the path to the configuration file by checking …\nHelper: Read and parse the configuration file at a given …\nExecutes a “defaults delete” command with the …\nExecutes a “defaults write” command with the given …\nFor a given TOML value, returns the flag and string. …\nDetermines the appropriate flag for a value when restoring …\nNormalizes the desired value for comparison. For booleans: …\nChecks whether a given domain exists using the “defaults…\nCollects domains and their flattened settings from a …\nRecursively flattens a TOML table into a list of (domain, …\nHelper: Reads the current value from defaults (if any) for …\nGets the effective domain from a domain string\nGiven the flattened domain (from config) and a key, return …\nHelper function to check if domain requires the com.apple …\nExecutes external commands, providing unified shell …\nLog levels for printing messages.\nColor constants.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCentral logging function.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the path where the snapshot is stored.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")